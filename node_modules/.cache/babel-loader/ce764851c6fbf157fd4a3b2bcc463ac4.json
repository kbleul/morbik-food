{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bisrat\\\\Documents\\\\code\\\\morbik-food\\\\src\\\\ThemeContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getInitialTheme = () => {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    const storedprefs = window.localStorage.getItem(\"color-theme\");\n\n    if (typeof storedprefs === \"string\") {\n      return storedprefs;\n    }\n\n    const userMedia = window.matchMedia('(prefers-color-scheme:dark)');\n\n    if (userMedia.matches) {\n      return 'dark';\n    }\n  }\n\n  return 'light';\n};\n\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = _ref => {\n  _s();\n\n  let {\n    initialTheme,\n    children\n  } = _ref;\n  const [theme, set_theme] = useState(getInitialTheme);\n\n  const rawSetTheme = rawTheme => {\n    const root = window.document.documentElement;\n    const isDark = rawTheme === 'dark';\n    root.classList.remove(isDark ? \"light\" : \"dark\");\n    root.classList.add(isDark ? \"dark\" : \"light\");\n    localStorage.setItem('color-theme', rawTheme);\n  };\n\n  if (initialTheme) {\n    rawSetTheme(initialTheme);\n  }\n\n  useEffect(() => {\n    rawSetTheme(theme);\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      set_theme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ThemeProvider, \"G/Ko2IVNvc3S5FGQTZKuZZ5YxJU=\");\n\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["C:/Users/Bisrat/Documents/code/morbik-food/src/ThemeContext.js"],"names":["React","useState","useEffect","createContext","getInitialTheme","window","localStorage","storedprefs","getItem","userMedia","matchMedia","matches","ThemeContext","ThemeProvider","initialTheme","children","theme","set_theme","rawSetTheme","rawTheme","root","document","documentElement","isDark","classList","remove","add","setItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,EAAuCC,aAAvC,QAA4D,OAA5D;;;AAEE,MAAMC,eAAe,GAAG,MAAM;AAC1B,MAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,YAA3C,EAAwD;AACpD,UAAMC,WAAW,GAAGF,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4B,aAA5B,CAApB;;AAEF,QAAG,OAAOD,WAAP,KAAuB,QAA1B,EAAqC;AAAE,aAAOA,WAAP;AAAqB;;AAE5D,UAAME,SAAS,GAAGJ,MAAM,CAACK,UAAP,CAAkB,6BAAlB,CAAlB;;AAEE,QAAGD,SAAS,CAACE,OAAb,EAAsB;AAAE,aAAO,MAAP;AAAgB;AAC3C;;AAED,SAAO,OAAP;AAEH,CAbD;;AAeA,OAAO,MAAMC,YAAY,gBAAGT,aAAa,EAAlC;AACP,OAAO,MAAMU,aAAa,GAAG,QAAgC;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,YAAF;AAAiBC,IAAAA;AAAjB,GAA+B;AACzD,QAAM,CAACC,KAAD,EAAQC,SAAR,IAAqBhB,QAAQ,CAACG,eAAD,CAAnC;;AAEC,QAAMc,WAAW,GAAIC,QAAD,IAAc;AAChC,UAAMC,IAAI,GAAGf,MAAM,CAACgB,QAAP,CAAgBC,eAA7B;AACA,UAAMC,MAAM,GAAGJ,QAAQ,KAAK,MAA5B;AACCC,IAAAA,IAAI,CAACI,SAAL,CAAeC,MAAf,CAAsBF,MAAM,GAAG,OAAH,GAAa,MAAzC;AACAH,IAAAA,IAAI,CAACI,SAAL,CAAeE,GAAf,CAAmBH,MAAM,GAAG,MAAH,GAAY,OAArC;AAEAjB,IAAAA,YAAY,CAACqB,OAAb,CAAqB,aAArB,EAAoCR,QAApC;AACF,GAPD;;AASA,MAAGL,YAAH,EAAiB;AAAEI,IAAAA,WAAW,CAACJ,YAAD,CAAX;AAA2B;;AAE9CZ,EAAAA,SAAS,CAAC,MAAM;AAAGgB,IAAAA,WAAW,CAACF,KAAD,CAAX;AAAoB,GAA9B,EAA+B,CAACA,KAAD,CAA/B,CAAT;AAEA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAAUC,MAAAA;AAAV,KAA9B;AAAA,cAAsDF;AAAtD;AAAA;AAAA;AAAA;AAAA,UADF;AAGJ,CAnBM;;GAAMF,a;;KAAAA,a","sourcesContent":["import React , {useState , useEffect , createContext } from 'react'\r\n\r\n  const getInitialTheme = () => {\r\n      if(typeof window !== 'undefined' && window.localStorage){\r\n          const storedprefs = window.localStorage.getItem(\"color-theme\");\r\n\r\n        if(typeof storedprefs === \"string\")  { return storedprefs; }\r\n\r\n        const userMedia = window.matchMedia('(prefers-color-scheme:dark)');\r\n\r\n          if(userMedia.matches) { return 'dark'; }\r\n      }\r\n\r\n      return 'light'\r\n\r\n  }\r\n\r\n  export const ThemeContext = createContext();\r\n  export const ThemeProvider = ({ initialTheme , children}) => {\r\n      const [theme, set_theme] = useState(getInitialTheme);\r\n\r\n       const rawSetTheme = (rawTheme) => {\r\n         const root = window.document.documentElement;\r\n         const isDark = rawTheme === 'dark';\r\n          root.classList.remove(isDark ? \"light\" : \"dark\");\r\n          root.classList.add(isDark ? \"dark\" : \"light\");\r\n\r\n          localStorage.setItem('color-theme', rawTheme);\r\n       };\r\n\r\n       if(initialTheme) { rawSetTheme(initialTheme) }\r\n\r\n       useEffect(() => {  rawSetTheme(theme) },[theme])\r\n      \r\n       return(\r\n         <ThemeContext.Provider value={{ theme , set_theme}} >{children}</ThemeContext.Provider>\r\n       );\r\n  }"]},"metadata":{},"sourceType":"module"}